// This Test Port skeleton source file was generated by the
// TTCN-3 Compiler of the TTCN-3 Test Executor version 8.3.0
// for (petro@DellVostro)

// Copyright (c) 2000-2021 Ericsson Telecom AB

// You may modify this file. Complete the body of empty functions and
// add your member functions here.

#include "PCOType.hh"
#include "log.hh"
#include "memory.h"

#include <stdio.h>
#include <fstream>

namespace udp__server__test__suit {

udp_client_ctx_t PCOType::s_ctx;

PCOType::PCOType(const char *par_port_name)
	: PCOType_BASE(par_port_name)
{
	LOG_ENTER();
	LOG_EXIT();
}

PCOType::~PCOType()
{
	LOG_ENTER();
	LOG_EXIT();
}

void PCOType::set_parameter(const char * /*parameter_name*/,
	const char * /*parameter_value*/)
{
	LOG_ENTER();
	LOG_EXIT();
}

void PCOType::Event_Handler(const fd_set *read_fds,
	const fd_set *write_fds, const fd_set *error_fds,
	double time_since_last_call)
{
	LOG_ENTER();
	size_t buf_len = 0, buf_size = 256;
	char *buf = (char*)Malloc(buf_size);
	memset(buf, 0, buf_size);

	if (FD_ISSET(s_ctx.fd, read_fds))
	{
		buf_len = buf_size;
		if (udp_client_rcv((const udp_client_ctx_t *)&s_ctx, buf, &buf_len))
		{
			incoming_message(CHARSTRING(strlen(buf), buf));
		}
		else
		{
			LOG("udp_client_rcv() failed");
		}
	}
	Free(buf);
	LOG_EXIT();
}

/*void PCOType::Handle_Fd_Event(int fd, boolean is_readable,
	boolean is_writable, boolean is_error) {}*/

void PCOType::Handle_Fd_Event_Error(int /*fd*/)
{
	LOG_ENTER();
	LOG_EXIT();
}

void PCOType::Handle_Fd_Event_Writable(int /*fd*/)
{
	LOG_ENTER();
	LOG_EXIT();
}

void PCOType::Handle_Fd_Event_Readable(int /*fd*/)
{
	LOG_ENTER();
	LOG_EXIT();
}

/*void PCOType::Handle_Timeout(double time_since_last_call) {}*/

void PCOType::user_map(const char *system_port)
{
	LOG_ENTER();
	fd_set readfds;
	FD_ZERO(&readfds);
	FD_SET(s_ctx.fd, &readfds);
	Install_Handler(&readfds, NULL, NULL, 0.0);
	LOG_EXIT();
}

void PCOType::user_unmap(const char *system_port)
{
	LOG_ENTER();
	Uninstall_Handler();
	LOG_EXIT();
}

void PCOType::user_start()
{
	LOG_ENTER();
	std::string ip = "127.0.0.1";
	int port = 5678;

	if (!udp_client_init(ip.c_str(), port, &s_ctx))
	{
		LOG("udp_client_init() failed");
	}

	LOG_EXIT();
}

void PCOType::user_stop()
{
	LOG_ENTER();
	if (!udp_client_deinit(&s_ctx))
	{
		LOG("udp_client_deinit() failed");
	}
	LOG_EXIT();
}

void PCOType::outgoing_send(const CHARSTRING& send_par)
{
	LOG_ENTER();
	if (!udp_client_send((const udp_client_ctx_t *)&s_ctx, (const char *)send_par))
	{
		LOG("udp_client_send() failed");
	}
	LOG_EXIT();
}

} /* end of namespace */
